"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.start = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const shelljs_1 = __importDefault(require("shelljs"));
const builder_1 = __importDefault(require("../../core/builder"));
const runtimeHost_1 = require("../../core/runtimeHost");
const utils_1 = require("../../core/utils");
const config_1 = require("../../config");
async function start(startContext, program) {
    let useAppDevServer = undefined;
    let useApiDevServer = undefined;
    if (utils_1.isHttpUrl(startContext)) {
        useAppDevServer = await utils_1.validateDevServerConfig(startContext);
    }
    else {
        // start the emulator from a specific artifact folder, if folder exists
        if (fs_1.default.existsSync(startContext)) {
            program.appArtifactLocation = startContext;
        }
        else {
            console.info(`INFO: The dist folder "${startContext}" is not found. Make sure that this folder exists or use the --build option to pre-build the app.`);
            process.exit(0);
        }
    }
    if (program.apiLocation) {
        if (utils_1.isHttpUrl(program.apiLocation)) {
            useApiDevServer = await utils_1.validateDevServerConfig(program.apiLocation);
        }
        // make sure api folder exists
        else if (fs_1.default.existsSync(program.apiLocation) === false) {
            console.info(`INFO: Skipping API because folder "${program.apiLocation}" is missing.`);
        }
    }
    // parse the Auth URI port or use default
    const authPort = (program.authPort || config_1.DEFAULT_CONFIG.authPort);
    const authPortAvailable = await utils_1.isPortAvailable({ port: authPort });
    if (authPortAvailable === false) {
        console.info(`INFO: Port "${authPortAvailable}" is already in use. Choose a different port (1024 to 49151).`);
        process.exit(0);
    }
    // get the app and api artifact locations
    let [appLocation, appArtifactLocation, apiLocation] = [
        program.appLocation,
        program.appArtifactLocation,
        program.apiLocation,
    ];
    // retrieve the project's build configuration
    // use any specific config that the user might provide
    const configFile = utils_1.readConfigFile({
        userConfig: {
            appLocation,
            appArtifactLocation,
            apiLocation,
        },
    });
    // parse the APP URI port
    let appPort = (program.appPort || config_1.DEFAULT_CONFIG.appPort);
    // handle the APP location config
    let serveStaticContent = undefined;
    if (useAppDevServer) {
        serveStaticContent = `echo 'using app dev server at ${useAppDevServer}'`;
        const { port } = utils_1.parseUrl(useAppDevServer);
        appPort = port;
    }
    else {
        if ((await utils_1.isPortAvailable({
            port: appPort,
        })) === false) {
            const randomPort = Math.floor(Math.random() * 49150) + 1024;
            // @Todo: don't block and just define a random port for static server
            // program.appPort = randomPort;
            console.info(`INFO: Cannot start static server at "http://${program.host}:${appPort}". Port is already in use.`);
            console.info(`INFO: Choose a different port (1024 to 49151).`);
            console.info(`Hint: Try swa start ${startContext} --app-port=${randomPort}`);
            process.exit(0);
        }
        const { command: hostCommand, args: hostArgs } = runtimeHost_1.createRuntimeHost({
            appPort: appPort,
            proxyHost: program.host,
            proxyPort: program.port,
            appLocation: configFile === null || configFile === void 0 ? void 0 : configFile.appLocation,
            appArtifactLocation: configFile === null || configFile === void 0 ? void 0 : configFile.appArtifactLocation,
        });
        serveStaticContent = `${hostCommand} ${hostArgs.join(" ")}`;
    }
    // parse the API URI port
    let apiPort = (program.apiPort || config_1.DEFAULT_CONFIG.apiPort);
    // handle the API location config
    let serveApiContent = undefined;
    if (useApiDevServer) {
        serveApiContent = `echo 'using api dev server at ${useApiDevServer}'`;
        const { port } = utils_1.parseUrl(useApiDevServer);
        apiPort = port;
    }
    else {
        // serve the api if and only if the user provide the --api-location flag
        if (program.apiLocation && (configFile === null || configFile === void 0 ? void 0 : configFile.apiLocation)) {
            serveApiContent = `([ -d '${configFile === null || configFile === void 0 ? void 0 : configFile.apiLocation}' ] && (cd ${configFile === null || configFile === void 0 ? void 0 : configFile.apiLocation}; func start --cors * --port ${program.apiPort})) || echo 'No API found. Skipping.'`;
        }
    }
    // set env vars for current command
    const envVarsObj = {
        DEBUG: program.verbose ? "*" : "",
        SWA_CLI_AUTH_PORT: `${program.authPort}`,
        SWA_CLI_API_PORT: `${apiPort}`,
        SWA_CLI_APP_PORT: `${appPort}`,
        SWA_CLI_APP_LOCATION: configFile === null || configFile === void 0 ? void 0 : configFile.appLocation,
        SWA_CLI_APP_ARTIFACT_LOCATION: configFile === null || configFile === void 0 ? void 0 : configFile.appArtifactLocation,
        SWA_CLI_API_LOCATION: configFile === null || configFile === void 0 ? void 0 : configFile.apiLocation,
        SWA_CLI_HOST: program.host,
        SWA_CLI_PORT: `${program.port}`,
    };
    const concurrentlyBin = utils_1.getBin("concurrently");
    const startCommand = [
        // run concurrent commands
        `${concurrentlyBin}`,
        `--restart-tries 1`,
        `--names " swa","auth"," app"," api"`,
        `-c 'bgYellow.bold,bgMagenta.bold,bgCyan.bold,bgGreen.bold'`,
        // start the reverse proxy
        `"node ../proxy/server.js"`,
        // emulate auth
        `"node ../auth/server.js --host=${program.host} --port=${authPort}"`,
        // serve the app
        `"${serveStaticContent}"`,
        // serve the api, if it's available
        serveApiContent && `"${serveApiContent}"`,
        `--color=always`,
    ];
    if (process.env.DEBUG) {
        console.log({ env: envVarsObj });
        console.log({ startCommand });
    }
    if (program.build) {
        // run the app/api builds
        builder_1.default({
            config: configFile,
        });
    }
    // run concurrent commands
    shelljs_1.default.exec(startCommand.join(" "), {
        // set the cwd to the installation folder
        cwd: path_1.default.resolve(__dirname, ".."),
        env: { ...process.env, ...envVarsObj },
    }, (_code, _stdout, stderr) => {
        if (stderr.length) {
            console.error(stderr);
        }
    });
}
exports.start = start;
//# sourceMappingURL=start.js.map