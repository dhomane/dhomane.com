#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const [, , ...args] = process.argv;
process.title = ["swa", ...args].join(" ");
const commander_1 = __importDefault(require("commander"));
const utils_1 = require("../core/utils");
const start_1 = require("./commands/start");
const config_1 = require("../config");
(async function () {
    const cli = commander_1.default
        .name("swa")
        .usage("[options] <command>")
        .version(require("../../package.json").version, "-v, --version")
        // SWA config
        .option("--app-location <appLocation>", "set app folder (location for the application code)", config_1.DEFAULT_CONFIG.appLocation)
        .option("--app, --app-artifact-location <appArtifactLocation>", "set app artifact folder (location where app files are built for production)", config_1.DEFAULT_CONFIG.appArtifactLocation)
        .option("--api, --api-location <apiLocation>", "set the API folder or URI", config_1.DEFAULT_CONFIG.apiLocation)
        // CLI config
        .option("--auth-port <authPort>", "set the authentication server port", utils_1.parsePort, config_1.DEFAULT_CONFIG.authPort)
        .option("--api-port <apiPort>", "set the API backend port", utils_1.parsePort, config_1.DEFAULT_CONFIG.apiPort)
        .option("--app-port <appPort>", "set the static server port", utils_1.parsePort, config_1.DEFAULT_CONFIG.appPort)
        .option("--host <host>", "set the cli host address", config_1.DEFAULT_CONFIG.host)
        .option("--port <port>", "set the cli port", utils_1.parsePort, config_1.DEFAULT_CONFIG.port)
        .option("--build", "build the API and APP before starting the emulator", false)
        .option("--verbose", "show debug logs", false);
    commander_1.default
        .command("start [context]")
        .description("start the emulator from a directory or with a specific port and host address")
        .action(async (context = "./") => {
        await start_1.start(context, cli);
    });
    await commander_1.default.parseAsync(process.argv);
    if (commander_1.default.verbose) {
        process.env.DEBUG = "*";
    }
})();
//# sourceMappingURL=index.js.map