"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.requestHandler = void 0;
const http_1 = require("http");
const utils_1 = require("../core/utils");
const url_1 = __importDefault(require("url"));
const port = utils_1.argv("--port") || 4242;
const host = utils_1.argv("--host") || "localhost";
const authPaths = [
    {
        method: "GET",
        route: /^\/app\/\.auth\/login\/(?<provider>aad|github|twitter|google|facebook|[a-z]+)/,
        function: "app_auth_login_provider",
    },
    {
        method: "GET",
        route: /^\/app\/\.auth\/me/,
        function: "app_auth_me",
    },
    {
        method: "GET",
        route: /^\/app\/\.auth\/logout/,
        function: "app_auth_logout",
    },
];
async function routeMatcher(url = "/") {
    var _a;
    for (let index = 0; index < authPaths.length; index++) {
        const path = authPaths[index];
        const match = url.match(new RegExp(path.route));
        if (match) {
            let bindingData;
            if ((_a = match.groups) === null || _a === void 0 ? void 0 : _a.provider) {
                bindingData = {
                    provider: match.groups.provider,
                };
            }
            const func = (await Promise.resolve().then(() => __importStar(require(`./routes/${path.function}`)))).default;
            return { func, bindingData };
        }
    }
    return { func: undefined, bindingData: undefined };
}
async function requestHandler(request, response) {
    var _a, _b;
    let defaultStatus = 200;
    const context = {
        invocationId: new Date().getTime().toString(36) + Math.random().toString(36).slice(2),
        bindingData: undefined,
        res: {},
    };
    const { func, bindingData } = await routeMatcher(request.url);
    if (func) {
        context.bindingData = bindingData;
        try {
            // populate the query property so other functions can access it.
            request.query = url_1.default.parse((request === null || request === void 0 ? void 0 : request.url) || "", true).query;
            await func(context, request);
            for (const key in context.res.headers) {
                const element = context.res.headers[key];
                if (element) {
                    response.setHeader(key, element);
                }
            }
            // set auth cookies
            if (context.res.cookies) {
                const serializedCookies = (_a = context.res.cookies) === null || _a === void 0 ? void 0 : _a.map((cookie) => {
                    if (cookie.expires) {
                        cookie.expires = new Date(cookie.expires);
                    }
                    return utils_1.serializeCookie(cookie.name, cookie.value, cookie);
                });
                response.setHeader("Set-Cookie", serializedCookies);
            }
            // enable CORS for all requests
            response.setHeader("Access-Control-Allow-Origin", request.headers.origin || "*");
            response.setHeader("Access-Control-Allow-Methods", "GET,OPTIONS");
            response.setHeader("Access-Control-Allow-Credentials", "true");
            // set JSON response by default (if no content type was set)
            if (response.hasHeader("Content-Type") === false) {
                response.setHeader("Content-Type", "application/json");
            }
            // if response type is JSON, serialize body response
            if (((_b = response.getHeader("Content-Type")) === null || _b === void 0 ? void 0 : _b.toString().includes("json")) && typeof context.res.body === "object") {
                context.res.body = JSON.stringify(context.res.body);
            }
        }
        catch (error) {
            console.error(error);
            defaultStatus = 500;
            context.res.body = {
                error: error.toString(),
            };
        }
    }
    else {
        defaultStatus = 404;
    }
    console.log("Response Headers", JSON.stringify(response.getHeaders(), null, 2));
    response.writeHead(context.res.status || defaultStatus);
    response.end(context.res.body);
}
exports.requestHandler = requestHandler;
const server = http_1.createServer(requestHandler);
server.listen(Number(port), host, () => {
    const { address, port } = server.address(); /* AddressInfo */
    const host = `http://${address}:${port}`;
    console.log(`Auth server listening on ${host}`);
});
//# sourceMappingURL=server.js.map