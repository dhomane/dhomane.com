"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const shelljs_1 = __importDefault(require("shelljs"));
const runtimes_1 = require("./runtimes");
const utils_1 = require("./utils");
const exec = (command, options = {}) => shelljs_1.default.exec(command, { async: false, ...options });
// use the concurrently binary provided by this emulator
const concurrentlyBin = utils_1.getBin("concurrently");
const nodeBuilder = (location, buildCommand, name, colour) => {
    const appBuildCommand = [
        "CI=1",
        concurrentlyBin,
        `--names ${name}`,
        `-c '${colour}'`,
        `--kill-others-on-fail`,
        `"npm install && ${buildCommand}"`,
        `--color=always`,
    ].join(" ");
    exec(appBuildCommand, {
        cwd: location,
    });
};
const dotnetBuilder = (location, name, colour) => {
    const appBuildCommand = [
        "CI=1",
        concurrentlyBin,
        `--names ${name}`,
        `-c '${colour}'`,
        `--kill-others-on-fail`,
        `"dotnet build"`,
        `--color=always`,
    ].join(" ");
    exec(appBuildCommand, {
        cwd: location,
    });
};
const builder = ({ config }) => {
    const configFile = utils_1.readConfigFile();
    if (configFile) {
        let { appLocation, apiLocation, appBuildCommand, apiBuildCommand } = config;
        const runtimeType = runtimes_1.detectRuntime(appLocation);
        try {
            switch (runtimeType) {
                case runtimes_1.RuntimeType.dotnet:
                    {
                        // build app
                        dotnetBuilder(appLocation, "app_build", "bgGreen.bold");
                        // NOTE: API is optional. Build it only if it exists
                        // This may result in a double-compile of some libraries if they are shared between the
                        // Blazor app and the API, but it's an acceptable outcome
                        apiLocation = path_1.default.resolve(process.cwd(), apiLocation);
                        if (fs_1.default.existsSync(apiLocation) === true && fs_1.default.existsSync(path_1.default.join(apiLocation, "host.json"))) {
                            dotnetBuilder(apiLocation, "api_build", "bgYellow.bold");
                        }
                    }
                    break;
                case runtimes_1.RuntimeType.node:
                default:
                    {
                        // figure out if appLocation exists
                        if (fs_1.default.existsSync(appLocation) === false) {
                            appLocation = process.cwd();
                        }
                        // build app
                        nodeBuilder(appLocation, appBuildCommand, "app_build", "bgGreen.bold");
                        // NOTE: API is optional. Build it only if it exists
                        apiLocation = path_1.default.resolve(process.cwd(), apiLocation);
                        if (fs_1.default.existsSync(apiLocation) === true && fs_1.default.existsSync(path_1.default.join(apiLocation, "host.json"))) {
                            nodeBuilder(apiLocation, apiBuildCommand, "api_build", "bgYellow.bold");
                        }
                    }
                    break;
            }
        }
        catch (stderr) {
            shelljs_1.default.echo(stderr);
        }
    }
};
exports.default = builder;
//# sourceMappingURL=builder.js.map