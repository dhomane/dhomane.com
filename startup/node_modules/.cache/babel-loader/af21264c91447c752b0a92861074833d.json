{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar react_1 = tslib_1.__importDefault(require(\"react\"));\n\nvar emotion_1 = require(\"emotion\");\n\nvar OptionItem_1 = tslib_1.__importDefault(require(\"../components/OptionItem\"));\n\nvar helper_1 = require(\"./helper\");\n\nvar constants_1 = require(\"./constants\");\n\nvar pushRef = function pushRef(elementsRef) {\n  return function (element) {\n    if (element) {\n      elementsRef.push(element);\n    }\n  };\n};\n\nfunction defaultOptionRenderer(selectedOption, options, selectedOptionClassName, optionClassName, onOptionClicked, elementsRef, getStyle) {\n  return options.map(function (option) {\n    if (helper_1.isOptionGroup(option)) {\n      // Is group of options\n      var _a = option,\n          groupOptions = _a.groupOptions,\n          label = _a.label;\n      return react_1.default.createElement(\"div\", {\n        key: label,\n        className: getStyle(constants_1.StyleKeys.GroupContainer)\n      }, react_1.default.createElement(\"div\", {\n        className: getStyle(constants_1.StyleKeys.GroupHeading)\n      }, react_1.default.createElement(\"div\", null, label.toUpperCase(), \" | \\xA0\"), react_1.default.createElement(\"div\", null, groupOptions.length)), groupOptions.map(function (groupOption) {\n        var selected = groupOption.value === selectedOption;\n        var groupOptionClass = emotion_1.cx(groupOption.className, getStyle(constants_1.StyleKeys.OptionItem, {\n          selected: selected\n        }));\n        return react_1.default.createElement(OptionItem_1.default, {\n          key: groupOption.value,\n          optionClass: groupOptionClass,\n          onOptionClicked: onOptionClicked,\n          option: groupOption,\n          ref: pushRef(elementsRef)\n        });\n      }), react_1.default.createElement(\"div\", {\n        className: getStyle(constants_1.StyleKeys.GroupDivider)\n      }));\n    }\n\n    var value = option.value,\n        className = option.className;\n    var optionClass = emotion_1.cx(className, getStyle(constants_1.StyleKeys.OptionItem, {\n      selected: value === selectedOption\n    }));\n    return react_1.default.createElement(OptionItem_1.default, {\n      key: value,\n      optionClass: optionClass,\n      onOptionClicked: onOptionClicked,\n      option: option,\n      ref: pushRef(elementsRef)\n    });\n  });\n}\n\nexports.default = defaultOptionRenderer;","map":null,"metadata":{},"sourceType":"script"}